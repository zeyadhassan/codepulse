{"version":3,"file":"extension.js","mappings":"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","sources":[".././src/extension.ts","../external commonjs \"vscode\"",".././src/codeAnalyzer.ts",".././src/utils/complexityCalculator.ts",".././src/utils/duplicationDetector.ts",".././src/utils/styleAnalyzer.ts",".././src/metricsCollector.ts",".././src/suggestionProvider.ts",".././src/dashboardView.ts","../external node-commonjs \"path\"","../external node-commonjs \"fs\"",".././src/statusBar.ts","../webpack/bootstrap","../webpack/before-startup","../webpack/startup","../webpack/after-startup"],"sourcesContent":["// src/extension.ts\r\nimport * as vscode from 'vscode';\r\nimport { CodeAnalyzer } from './codeAnalyzer';\r\nimport { MetricsCollector } from './metricsCollector';\r\nimport { SuggestionProvider } from './suggestionProvider';\r\nimport { DashboardView } from './dashboardView';\r\nimport { StatusBarManager } from './statusBar';\r\n\r\n// Add new TreeDataProvider classes for the views\r\nclass SuggestionsTreeDataProvider implements vscode.TreeDataProvider<SuggestionItem> {\r\n  private _onDidChangeTreeData: vscode.EventEmitter<SuggestionItem | undefined | null> = new vscode.EventEmitter<SuggestionItem | undefined | null>();\r\n  readonly onDidChangeTreeData: vscode.Event<SuggestionItem | undefined | null> = this._onDidChangeTreeData.event;\r\n  \r\n  private suggestions: any[] = [];\r\n  \r\n  refresh(newSuggestions: any[]): void {\r\n    this.suggestions = newSuggestions;\r\n    this._onDidChangeTreeData.fire();\r\n  }\r\n  \r\n  getTreeItem(element: SuggestionItem): vscode.TreeItem {\r\n    return element;\r\n  }\r\n  \r\n  getChildren(element?: SuggestionItem): Thenable<SuggestionItem[]> {\r\n    if (element) {\r\n      return Promise.resolve([]);\r\n    }\r\n    \r\n    if (this.suggestions.length === 0) {\r\n      return Promise.resolve([]);\r\n    }\r\n    \r\n    return Promise.resolve(\r\n      this.suggestions.map(suggestion => {\r\n        const item = new SuggestionItem(\r\n          suggestion.title,\r\n          suggestion.description,\r\n          vscode.TreeItemCollapsibleState.None\r\n        );\r\n        \r\n        item.command = {\r\n          command: 'codepulse.applyQuickFix',\r\n          title: 'Apply Fix',\r\n          arguments: [suggestion]\r\n        };\r\n        \r\n        item.contextValue = 'suggestion';\r\n        item.tooltip = suggestion.description;\r\n        \r\n        return item;\r\n      })\r\n    );\r\n  }\r\n}\r\n\r\nclass MetricsTreeDataProvider implements vscode.TreeDataProvider<MetricItem> {\r\n  private _onDidChangeTreeData: vscode.EventEmitter<MetricItem | undefined | null> = new vscode.EventEmitter<MetricItem | undefined | null>();\r\n  readonly onDidChangeTreeData: vscode.Event<MetricItem | undefined | null> = this._onDidChangeTreeData.event;\r\n  \r\n  private metrics: any = {};\r\n  \r\n  refresh(newMetrics: any): void {\r\n    this.metrics = newMetrics;\r\n    this._onDidChangeTreeData.fire();\r\n  }\r\n  \r\n  getTreeItem(element: MetricItem): vscode.TreeItem {\r\n    return element;\r\n  }\r\n  \r\n  getChildren(element?: MetricItem): Thenable<MetricItem[]> {\r\n    if (element) {\r\n      return Promise.resolve([]);\r\n    }\r\n    \r\n    if (!this.metrics || Object.keys(this.metrics).length === 0) {\r\n      return Promise.resolve([]);\r\n    }\r\n    \r\n    const items: MetricItem[] = [];\r\n    \r\n    // Add overall health score\r\n    if (this.metrics.overallHealth !== undefined) {\r\n      items.push(new MetricItem(`Health Score: ${Math.round(this.metrics.overallHealth)}`, '', vscode.TreeItemCollapsibleState.None));\r\n    }\r\n    \r\n    // Add complexity metrics\r\n    if (this.metrics.metrics) {\r\n      const m = this.metrics.metrics;\r\n      if (m.averageComplexity !== undefined) {\r\n        items.push(new MetricItem(`Average Complexity: ${m.averageComplexity.toFixed(2)}`, '', vscode.TreeItemCollapsibleState.None));\r\n      }\r\n      \r\n      if (m.duplicationPercentage !== undefined) {\r\n        items.push(new MetricItem(`Duplication: ${m.duplicationPercentage.toFixed(2)}%`, '', vscode.TreeItemCollapsibleState.None));\r\n      }\r\n      \r\n      if (m.codeLines !== undefined && m.commentLines !== undefined) {\r\n        const ratio = m.commentLines > 0 ? (m.codeLines / m.commentLines).toFixed(2) : 'N/A';\r\n        items.push(new MetricItem(`Code to Comment Ratio: ${ratio}`, '', vscode.TreeItemCollapsibleState.None));\r\n      }\r\n    }\r\n    \r\n    return Promise.resolve(items);\r\n  }\r\n}\r\n\r\nclass SuggestionItem extends vscode.TreeItem {\r\n  constructor(\r\n    public readonly label: string,\r\n    public readonly description: string,\r\n    public readonly collapsibleState: vscode.TreeItemCollapsibleState\r\n  ) {\r\n    super(label, collapsibleState);\r\n  }\r\n}\r\n\r\nclass MetricItem extends vscode.TreeItem {\r\n  constructor(\r\n    public readonly label: string,\r\n    public readonly description: string,\r\n    public readonly collapsibleState: vscode.TreeItemCollapsibleState\r\n  ) {\r\n    super(label, collapsibleState);\r\n  }\r\n}\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n  console.log('CodePulse extension is now active');\r\n  \r\n  // Initialize components\r\n  const metricsCollector = new MetricsCollector(context.globalState);\r\n  const codeAnalyzer = new CodeAnalyzer();\r\n  const suggestionProvider = new SuggestionProvider();\r\n  const dashboardView = new DashboardView(context, metricsCollector);\r\n  const statusBar = new StatusBarManager();\r\n  \r\n  // Create tree data providers for views\r\n  const suggestionsDataProvider = new SuggestionsTreeDataProvider();\r\n  const metricsDataProvider = new MetricsTreeDataProvider();\r\n  \r\n  // Register tree data providers\r\n  vscode.window.registerTreeDataProvider('codepulse-suggestions', suggestionsDataProvider);\r\n  vscode.window.registerTreeDataProvider('codepulse-metrics', metricsDataProvider);\r\n  \r\n  // Set up event listeners\r\n  let analyzeOnSaveDisposable = vscode.workspace.onDidSaveTextDocument(async (document) => {\r\n    const config = vscode.workspace.getConfiguration('codepulse');\r\n    if (config.get('enableAutomaticAnalysis')) {\r\n      await analyzeDocument(document);\r\n    }\r\n  });\r\n  \r\n  // Register commands\r\n  let showDashboardDisposable = vscode.commands.registerCommand('codepulse.showDashboard', () => {\r\n    dashboardView.show();\r\n  });\r\n  \r\n  let analyzeCurrentFileDisposable = vscode.commands.registerCommand('codepulse.analyzeCurrentFile', async () => {\r\n    const editor = vscode.window.activeTextEditor;\r\n    if (editor) {\r\n      await analyzeDocument(editor.document);\r\n    } else {\r\n      vscode.window.showInformationMessage('No file is currently open');\r\n    }\r\n  });\r\n  \r\n  let applyQuickFixDisposable = vscode.commands.registerCommand('codepulse.applyQuickFix', async (fix) => {\r\n    if (fix && fix.edit) {\r\n      await vscode.workspace.applyEdit(fix.edit);\r\n      vscode.window.showInformationMessage('Applied fix: ' + fix.title);\r\n    }\r\n  });\r\n  \r\n  // Function to analyze a document\r\n  async function analyzeDocument(document: vscode.TextDocument) {\r\n    // Skip non-code files\r\n    if (!isCodeFile(document)) {\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const startTime = Date.now();\r\n      statusBar.setAnalyzing();\r\n      \r\n      // Run analysis\r\n      const analysisResults = await codeAnalyzer.analyze(document);\r\n      \r\n      // Store metrics\r\n      metricsCollector.recordMetrics(document.fileName, analysisResults);\r\n      \r\n      // Generate suggestions\r\n      const suggestions = suggestionProvider.provideSuggestions(document, analysisResults);\r\n      \r\n      // Update tree views\r\n      suggestionsDataProvider.refresh(suggestions);\r\n      metricsDataProvider.refresh(analysisResults);\r\n      \r\n      // Show diagnostics\r\n      updateDiagnostics(document, analysisResults, suggestions);\r\n      \r\n      // Update status bar\r\n      const endTime = Date.now();\r\n      const health = analysisResults.overallHealth;\r\n      statusBar.setHealth(health, `Analysis took ${endTime - startTime}ms`);\r\n      \r\n      return analysisResults;\r\n    } catch (err) {\r\n      console.error('Analysis error:', err);\r\n      statusBar.setError();\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  // Helper to determine if a file is a code file\r\n  function isCodeFile(document: vscode.TextDocument): boolean {\r\n    const fileName = document.fileName.toLowerCase();\r\n    const supportedExtensions = ['.js', '.ts', '.jsx', '.tsx', '.py', '.java', '.c', '.cpp', '.cs'];\r\n    return supportedExtensions.some(ext => fileName.endsWith(ext));\r\n  }\r\n  \r\n  // Create diagnostics collection\r\n  const diagnosticsCollection = vscode.languages.createDiagnosticCollection('codepulse');\r\n  \r\n  // Function to update diagnostics\r\n  function updateDiagnostics(\r\n    document: vscode.TextDocument, \r\n    results: any, \r\n    _suggestions: any[]\r\n  ) {\r\n    const diagnostics: vscode.Diagnostic[] = [];\r\n    \r\n    // Convert complexity issues to diagnostics\r\n    results.complexityIssues.forEach((issue: any) => {\r\n      const range = new vscode.Range(\r\n        issue.line, 0, \r\n        issue.line, document.lineAt(issue.line).text.length\r\n      );\r\n      \r\n      const diagnostic = new vscode.Diagnostic(\r\n        range,\r\n        `High complexity (${issue.complexity}): ${issue.message}`,\r\n        vscode.DiagnosticSeverity.Warning\r\n      );\r\n      \r\n      diagnostic.source = 'CodePulse';\r\n      diagnostic.code = 'complexity';\r\n      diagnostics.push(diagnostic);\r\n    });\r\n    \r\n    // Convert duplication issues to diagnostics\r\n    results.duplicationIssues.forEach((issue: any) => {\r\n      const startLine = issue.startLine;\r\n      const endLine = issue.endLine;\r\n      \r\n      const range = new vscode.Range(\r\n        startLine, 0,\r\n        endLine, document.lineAt(Math.min(endLine, document.lineCount - 1)).text.length\r\n      );\r\n      \r\n      const diagnostic = new vscode.Diagnostic(\r\n        range,\r\n        `Duplicated code: ${issue.message}`,\r\n        vscode.DiagnosticSeverity.Information\r\n      );\r\n      \r\n      diagnostic.source = 'CodePulse';\r\n      diagnostic.code = 'duplication';\r\n      diagnostics.push(diagnostic);\r\n    });\r\n    \r\n    // Add style issues\r\n    results.styleIssues.forEach((issue: any) => {\r\n      const range = new vscode.Range(\r\n        issue.line, 0,\r\n        issue.line, document.lineAt(issue.line).text.length\r\n      );\r\n      \r\n      const diagnostic = new vscode.Diagnostic(\r\n        range,\r\n        `Style issue: ${issue.message}`,\r\n        vscode.DiagnosticSeverity.Information\r\n      );\r\n      \r\n      diagnostic.source = 'CodePulse';\r\n      diagnostic.code = 'style';\r\n      diagnostics.push(diagnostic);\r\n    });\r\n    \r\n    // Set diagnostics for the current file\r\n    diagnosticsCollection.set(document.uri, diagnostics);\r\n  }\r\n  \r\n  // Add all disposables to context subscriptions\r\n  context.subscriptions.push(\r\n    analyzeOnSaveDisposable,\r\n    showDashboardDisposable,\r\n    analyzeCurrentFileDisposable,\r\n    applyQuickFixDisposable,\r\n    diagnosticsCollection,\r\n    statusBar\r\n  );\r\n  \r\n  // Analyze current file on activation if one is open\r\n  const activeEditor = vscode.window.activeTextEditor;\r\n  if (activeEditor) {\r\n    analyzeDocument(activeEditor.document);\r\n  }\r\n}\r\n\r\nexport function deactivate() {\r\n  // Clean up resources\r\n}","module.exports = require(\"vscode\");","// src/codeAnalyzer.ts\r\nimport * as vscode from 'vscode';\r\nimport { ComplexityCalculator } from './utils/complexityCalculator';\r\nimport { DuplicationDetector } from './utils/duplicationDetector';\r\nimport { StyleAnalyzer } from './utils/styleAnalyzer';\r\n\r\nexport interface AnalysisResult {\r\n  overallHealth: number; // 0-100 score\r\n  complexityIssues: ComplexityIssue[];\r\n  duplicationIssues: DuplicationIssue[];\r\n  styleIssues: StyleIssue[];\r\n  metrics: CodeMetrics;\r\n}\r\n\r\nexport interface ComplexityIssue {\r\n  line: number;\r\n  complexity: number;\r\n  message: string;\r\n  functionName: string;\r\n}\r\n\r\nexport interface DuplicationIssue {\r\n  startLine: number;\r\n  endLine: number;\r\n  message: string;\r\n  duplicateLocations: Array<{ file: string, startLine: number, endLine: number }>;\r\n}\r\n\r\nexport interface StyleIssue {\r\n  line: number;\r\n  message: string;\r\n  rule: string;\r\n}\r\n\r\nexport interface CodeMetrics {\r\n  totalLines: number;\r\n  codeLines: number;\r\n  commentLines: number;\r\n  functionCount: number;\r\n  averageComplexity: number;\r\n  maxComplexity: number;\r\n  duplicationPercentage: number;\r\n}\r\n\r\nexport class CodeAnalyzer {\r\n  private complexityCalculator: ComplexityCalculator;\r\n  private duplicationDetector: DuplicationDetector;\r\n  private styleAnalyzer: StyleAnalyzer;\r\n  \r\n  constructor() {\r\n    this.complexityCalculator = new ComplexityCalculator();\r\n    this.duplicationDetector = new DuplicationDetector();\r\n    this.styleAnalyzer = new StyleAnalyzer();\r\n  }\r\n  \r\n  public async analyze(document: vscode.TextDocument): Promise<AnalysisResult> {\r\n    const text = document.getText();\r\n    const fileName = document.fileName;\r\n    const languageId = document.languageId;\r\n    \r\n    // Skip if file is too large to avoid performance issues\r\n    if (text.length > 500000) { // ~500KB\r\n      return this.createEmptyResult('File too large for analysis');\r\n    }\r\n    \r\n    try {\r\n      // Get configuration\r\n      const config = vscode.workspace.getConfiguration('codepulse');\r\n      const complexityThreshold = config.get('complexityThreshold') as number;\r\n      const duplicationThreshold = config.get('duplicationThreshold') as number;\r\n      \r\n      // Run complexity analysis\r\n      const complexityResults = await this.complexityCalculator.calculate(text, languageId, complexityThreshold);\r\n      \r\n      // Run duplication detection\r\n      const duplicationResults = await this.duplicationDetector.detect(text, fileName, duplicationThreshold);\r\n      \r\n      // Run style analysis\r\n      const styleResults = await this.styleAnalyzer.analyze(text, languageId);\r\n      \r\n      // Calculate metrics\r\n      const metrics = this.calculateMetrics(\r\n        text, \r\n        complexityResults.complexityIssues, \r\n        duplicationResults.duplicationIssues\r\n      );\r\n      \r\n      // Calculate overall health score (0-100)\r\n      const overallHealth = this.calculateHealthScore(\r\n        complexityResults.complexityIssues,\r\n        duplicationResults.duplicationIssues,\r\n        styleResults.styleIssues,\r\n        metrics\r\n      );\r\n      \r\n      return {\r\n        overallHealth,\r\n        complexityIssues: complexityResults.complexityIssues,\r\n        duplicationIssues: duplicationResults.duplicationIssues,\r\n        styleIssues: styleResults.styleIssues,\r\n        metrics\r\n      };\r\n    } catch (err) {\r\n      console.error('Error during analysis:', err);\r\n      return this.createEmptyResult('Analysis error');\r\n    }\r\n  }\r\n  \r\n  private calculateMetrics(\r\n    text: string,\r\n    complexityIssues: ComplexityIssue[],\r\n    duplicationIssues: DuplicationIssue[]\r\n  ): CodeMetrics {\r\n    const lines = text.split('\\n');\r\n    const totalLines = lines.length;\r\n    \r\n    // Count code and comment lines\r\n    let commentLines = 0;\r\n    let codeLines = 0;\r\n    \r\n    let inBlockComment = false;\r\n    for (const line of lines) {\r\n      const trimmedLine = line.trim();\r\n      \r\n      if (inBlockComment) {\r\n        commentLines++;\r\n        if (trimmedLine.includes('*/')) {\r\n          inBlockComment = false;\r\n        }\r\n      } else if (trimmedLine.startsWith('//')) {\r\n        commentLines++;\r\n      } else if (trimmedLine.startsWith('/*')) {\r\n        commentLines++;\r\n        if (!trimmedLine.includes('*/')) {\r\n          inBlockComment = true;\r\n        }\r\n      } else if (trimmedLine.length > 0) {\r\n        codeLines++;\r\n      }\r\n    }\r\n    \r\n    // Calculate complexity metrics\r\n    const complexities = complexityIssues.map(issue => issue.complexity);\r\n    const functionCount = complexities.length;\r\n    const totalComplexity = complexities.reduce((sum, val) => sum + val, 0);\r\n    const averageComplexity = functionCount > 0 ? totalComplexity / functionCount : 0;\r\n    const maxComplexity = functionCount > 0 ? Math.max(...complexities) : 0;\r\n    \r\n    // Calculate duplication percentage\r\n    let duplicatedLines = 0;\r\n    duplicationIssues.forEach(issue => {\r\n      duplicatedLines += (issue.endLine - issue.startLine + 1);\r\n    });\r\n    const duplicationPercentage = totalLines > 0 ? (duplicatedLines / totalLines) * 100 : 0;\r\n    \r\n    return {\r\n      totalLines,\r\n      codeLines,\r\n      commentLines,\r\n      functionCount,\r\n      averageComplexity,\r\n      maxComplexity,\r\n      duplicationPercentage\r\n    };\r\n  }\r\n  \r\n  private calculateHealthScore(\r\n    complexityIssues: ComplexityIssue[],\r\n    _duplicationIssues: DuplicationIssue[],\r\n    styleIssues: StyleIssue[],\r\n    metrics: CodeMetrics\r\n  ): number {\r\n    // This is a simple scoring algorithm that can be refined over time\r\n    \r\n    // Start with a perfect score\r\n    let score = 100;\r\n    \r\n    // Deduct for complexity issues (more impact for higher complexity)\r\n    complexityIssues.forEach(issue => {\r\n      // Deduct more points for higher complexity\r\n      score -= Math.min(10, (issue.complexity / 5));\r\n    });\r\n    \r\n    // Deduct for duplication\r\n    score -= Math.min(30, metrics.duplicationPercentage);\r\n    \r\n    // Deduct for style issues (less impact)\r\n    score -= Math.min(10, styleIssues.length);\r\n    \r\n    // Ensure score is in 0-100 range\r\n    return Math.max(0, Math.min(100, score));\r\n  }\r\n  \r\n  private createEmptyResult(_reason: string): AnalysisResult {\r\n    return {\r\n      overallHealth: 0,\r\n      complexityIssues: [],\r\n      duplicationIssues: [],\r\n      styleIssues: [],\r\n      metrics: {\r\n        totalLines: 0,\r\n        codeLines: 0,\r\n        commentLines: 0,\r\n        functionCount: 0,\r\n        averageComplexity: 0,\r\n        maxComplexity: 0,\r\n        duplicationPercentage: 0\r\n      }\r\n    };\r\n  }\r\n}","// src/utils/complexityCalculator.ts\r\nimport * as vscode from 'vscode';\r\nimport { ComplexityIssue } from '../codeAnalyzer';\r\n\r\ninterface ComplexityResult {\r\n  complexityIssues: ComplexityIssue[];\r\n}\r\n\r\nexport class ComplexityCalculator {\r\n  /**\r\n   * Calculate cyclomatic complexity for the given code\r\n   */\r\n  public async calculate(code: string, languageId: string, threshold: number): Promise<ComplexityResult> {\r\n    const complexityIssues: ComplexityIssue[] = [];\r\n    \r\n    try {\r\n      // Different parsing strategies based on language\r\n      switch (languageId) {\r\n        case 'javascript':\r\n        case 'typescript':\r\n        case 'javascriptreact':\r\n        case 'typescriptreact':\r\n          complexityIssues.push(...this.analyzeJavaScriptFamily(code, threshold));\r\n          break;\r\n        case 'python':\r\n          complexityIssues.push(...this.analyzePython(code, threshold));\r\n          break;\r\n        default:\r\n          // Basic fallback analysis for unsupported languages\r\n          complexityIssues.push(...this.basicAnalysis(code, threshold));\r\n      }\r\n      \r\n      return { complexityIssues };\r\n    } catch (err) {\r\n      console.error('Error in complexity calculation:', err);\r\n      return { complexityIssues: [] };\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Analyze JavaScript/TypeScript code for complexity\r\n   */\r\n  private analyzeJavaScriptFamily(code: string, threshold: number): ComplexityIssue[] {\r\n    const issues: ComplexityIssue[] = [];\r\n    const lines = code.split('\\n');\r\n    \r\n    // Simple function detection - look for function declarations and arrow functions\r\n    const functionRegex = /function\\s+(\\w+)\\s*\\(/g;\r\n    const methodRegex = /(\\w+)\\s*\\([^)]*\\)\\s*{/g;\r\n    const arrowFunctionRegex = /(const|let|var)?\\s*(\\w+)\\s*=\\s*(?:\\([^)]*\\)|[^=]+)=>/g;\r\n    \r\n    // Track function blocks to calculate complexity\r\n    const functionBlocks: Array<{\r\n      name: string;\r\n      startLine: number;\r\n      endLine: number | null;\r\n      complexity: number;\r\n    }> = [];\r\n    \r\n    // First pass: identify function boundaries\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const line = lines[i];\r\n      \r\n      // Check for function declarations\r\n      const functionMatches = [...line.matchAll(functionRegex)];\r\n      for (const match of functionMatches) {\r\n        functionBlocks.push({\r\n          name: match[1],\r\n          startLine: i,\r\n          endLine: null,\r\n          complexity: 1 // Base complexity is 1\r\n        });\r\n      }\r\n      \r\n      // Check for method declarations\r\n      const methodMatches = [...line.matchAll(methodRegex)];\r\n      for (const match of methodMatches) {\r\n        functionBlocks.push({\r\n          name: match[1],\r\n          startLine: i,\r\n          endLine: null,\r\n          complexity: 1\r\n        });\r\n      }\r\n      \r\n      // Check for arrow functions\r\n      const arrowMatches = [...line.matchAll(arrowFunctionRegex)];\r\n      for (const match of arrowMatches) {\r\n        functionBlocks.push({\r\n          name: match[2] || 'anonymous',\r\n          startLine: i,\r\n          endLine: null,\r\n          complexity: 1\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Second pass: calculate complexity by counting branches\r\n    // Simple heuristic: count if, else, for, while, switch, case, &&, ||, ?:\r\n    const complexityMarkers = [\r\n      'if ', 'else ', 'for(', 'for (', 'while(', 'while (', \r\n      'switch(', 'switch (', 'case ', '&&', '||', '?'\r\n    ];\r\n    \r\n    for (let i = 0; i < lines.length; i++) {\r\n      const line = lines[i].trim();\r\n      \r\n      // Skip comments\r\n      if (line.startsWith('//') || line.startsWith('/*') || line.startsWith('*')) {\r\n        continue;\r\n      }\r\n      \r\n      // Find active function blocks for this line\r\n      const activeBlocks = functionBlocks.filter(\r\n        block => block.startLine <= i && (block.endLine === null || block.endLine >= i)\r\n      );\r\n      \r\n      // Increment complexity for each found marker\r\n      for (const block of activeBlocks) {\r\n        complexityMarkers.forEach(marker => {\r\n          if (line.includes(marker)) {\r\n            block.complexity++;\r\n          }\r\n        });\r\n      }\r\n      \r\n      // Check for function end with curly brace\r\n      if (line.includes('}') && activeBlocks.length > 0) {\r\n        // Simple approach: close the most recently opened block\r\n        // This is a simplification, in a real implementation we'd need proper parsing\r\n        const lastBlock = activeBlocks[activeBlocks.length - 1];\r\n        if (lastBlock.endLine === null) {\r\n          lastBlock.endLine = i;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Convert high complexity functions to issues\r\n    for (const block of functionBlocks) {\r\n      if (block.complexity >= threshold) {\r\n        issues.push({\r\n          line: block.startLine,\r\n          complexity: block.complexity,\r\n          functionName: block.name,\r\n          message: `Function '${block.name}' has high cyclomatic complexity (${block.complexity})`\r\n        });\r\n      }\r\n    }\r\n    \r\n    return issues;\r\n  }\r\n  \r\n  /**\r\n   * Analyze Python code for complexity\r\n   */\r\n  private analyzePython(code: string, threshold: number): ComplexityIssue[] {\r\n    const issues: ComplexityIssue[] = [];\r\n    const lines = code.split('\\n');\r\n    \r\n    // Look for function definitions in Python\r\n    const functionRegex = /def\\s+(\\w+)\\s*\\(/;\r\n    \r\n    // Complexity markers in Python\r\n    const complexityMarkers = [\r\n      'if ', 'elif ', 'else:', 'for ', 'while ', \r\n      'except:', 'finally:', 'and ', 'or '\r\n    ];\r\n    \r\n    let currentFunction: {\r\n      name: string;\r\n      startLine: number;\r\n      complexity: number;\r\n    } | null = null;\r\n    \r\n    // Track indentation level of function\r\n    let functionIndentation = 0;\r\n    \r\n    for (let i = 0; i < lines.length; i++) {\r\n      const line = lines[i];\r\n      const trimmedLine = line.trim();\r\n      \r\n      // Skip empty lines and comments\r\n      if (trimmedLine.length === 0 || trimmedLine.startsWith('#')) {\r\n        continue;\r\n      }\r\n      \r\n      // Check for function definition\r\n      const functionMatch = functionRegex.exec(trimmedLine);\r\n      if (functionMatch) {\r\n        // If we were tracking a function, add it to issues if complexity is high enough\r\n        if (currentFunction && currentFunction.complexity >= threshold) {\r\n          issues.push({\r\n            line: currentFunction.startLine,\r\n            complexity: currentFunction.complexity,\r\n            functionName: currentFunction.name,\r\n            message: `Function '${currentFunction.name}' has high cyclomatic complexity (${currentFunction.complexity})`\r\n          });\r\n        }\r\n        \r\n        // Start tracking new function\r\n        currentFunction = {\r\n          name: functionMatch[1],\r\n          startLine: i,\r\n          complexity: 1 // Base complexity\r\n        };\r\n        \r\n        // Calculate indentation for function\r\n        functionIndentation = line.length - trimmedLine.length;\r\n        continue;\r\n      }\r\n      \r\n      // If we're in a function, calculate complexity\r\n      if (currentFunction) {\r\n        // Check if the line is part of the function (indentation greater than function def)\r\n        const indentation = line.length - trimmedLine.length;\r\n        \r\n        if (indentation <= functionIndentation && trimmedLine.length > 0) {\r\n          // End of function found, add to issues if complexity is high enough\r\n          if (currentFunction.complexity >= threshold) {\r\n            issues.push({\r\n              line: currentFunction.startLine,\r\n              complexity: currentFunction.complexity,\r\n              functionName: currentFunction.name,\r\n              message: `Function '${currentFunction.name}' has high cyclomatic complexity (${currentFunction.complexity})`\r\n            });\r\n          }\r\n          \r\n          currentFunction = null;\r\n          continue;\r\n        }\r\n        \r\n        // Check for complexity markers\r\n        for (const marker of complexityMarkers) {\r\n          if (trimmedLine.startsWith(marker) || \r\n              trimmedLine.includes(' ' + marker)) {\r\n            currentFunction.complexity++;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Don't forget the last function\r\n    if (currentFunction && currentFunction.complexity >= threshold) {\r\n      issues.push({\r\n        line: currentFunction.startLine,\r\n        complexity: currentFunction.complexity,\r\n        functionName: currentFunction.name,\r\n        message: `Function '${currentFunction.name}' has high cyclomatic complexity (${currentFunction.complexity})`\r\n      });\r\n    }\r\n    \r\n    return issues;\r\n  }\r\n  \r\n  /**\r\n   * Basic analysis for languages without specific implementation\r\n   */\r\n  private basicAnalysis(code: string, threshold: number): ComplexityIssue[] {\r\n    // This is a very simplified analysis for languages we don't have specific parsers for\r\n    const issues: ComplexityIssue[] = [];\r\n    const lines = code.split('\\n');\r\n    \r\n    // Simple heuristic: look for blocks with many control statements\r\n    let currentBlockStart = -1;\r\n    let currentBlockName = '';\r\n    let currentComplexity = 0;\r\n    let bracketBalance = 0;\r\n    \r\n    // Complexity markers that are common across many languages\r\n    const complexityMarkers = [\r\n      'if', 'else', 'for', 'while', 'switch', 'case', '&&', '||', '?:'\r\n    ];\r\n    \r\n    for (let i = 0; i < lines.length; i++) {\r\n      const line = lines[i].trim();\r\n      \r\n      // Skip empty lines and common comment formats\r\n      if (line.length === 0 || line.startsWith('//') || line.startsWith('#') || \r\n          line.startsWith('/*') || line.startsWith('*')) {\r\n        continue;\r\n      }\r\n      \r\n      // Count opening/closing brackets to track blocks\r\n      const openBrackets = (line.match(/{/g) || []).length;\r\n      const closeBrackets = (line.match(/}/g) || []).length;\r\n      \r\n      // Opening a new block\r\n      if (bracketBalance === 0 && openBrackets > 0) {\r\n        const blockNameMatch = /\\s*(\\w+)\\s*\\([^)]*\\)\\s*{/.exec(line);\r\n        currentBlockStart = i;\r\n        currentBlockName = blockNameMatch ? blockNameMatch[1] : 'anonymous';\r\n        currentComplexity = 1; // Base complexity\r\n      }\r\n      \r\n      bracketBalance += openBrackets - closeBrackets;\r\n      \r\n      // Inside a block, count complexity\r\n      if (currentBlockStart >= 0) {\r\n        for (const marker of complexityMarkers) {\r\n          if (line.includes(marker)) {\r\n            currentComplexity++;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Block ended\r\n      if (currentBlockStart >= 0 && bracketBalance === 0 && closeBrackets > 0) {\r\n        // Check if complexity is above threshold\r\n        if (currentComplexity >= threshold) {\r\n          issues.push({\r\n            line: currentBlockStart,\r\n            complexity: currentComplexity,\r\n            functionName: currentBlockName,\r\n            message: `Block '${currentBlockName}' has high cyclomatic complexity (${currentComplexity})`\r\n          });\r\n        }\r\n        \r\n        currentBlockStart = -1;\r\n        currentBlockName = '';\r\n        currentComplexity = 0;\r\n      }\r\n    }\r\n    \r\n    return issues;\r\n  }\r\n}","// src/utils/duplicationDetector.ts\r\nimport * as vscode from 'vscode';\r\nimport { DuplicationIssue } from '../codeAnalyzer';\r\n\r\ninterface DuplicationResult {\r\n  duplicationIssues: DuplicationIssue[];\r\n}\r\n\r\nexport class DuplicationDetector {\r\n  /**\r\n   * Detect code duplication in the provided code\r\n   */\r\n  public async detect(\r\n    code: string, \r\n    filePath: string, \r\n    minLines: number\r\n  ): Promise<DuplicationResult> {\r\n    const duplicationIssues: DuplicationIssue[] = [];\r\n    \r\n    try {\r\n      const lines = code.split('\\n');\r\n      \r\n      // Skip if file is too small\r\n      if (lines.length < minLines * 2) {\r\n        return { duplicationIssues };\r\n      }\r\n      \r\n      const duplications = this.findDuplications(lines, minLines);\r\n      \r\n      // Convert to duplication issues\r\n      for (const duplication of duplications) {\r\n        duplicationIssues.push({\r\n          startLine: duplication.firstStart,\r\n          endLine: duplication.firstStart + duplication.length - 1,\r\n          message: `Duplicated block of ${duplication.length} lines`,\r\n          duplicateLocations: [\r\n            {\r\n              file: filePath,\r\n              startLine: duplication.secondStart,\r\n              endLine: duplication.secondStart + duplication.length - 1\r\n            }\r\n          ]\r\n        });\r\n      }\r\n      \r\n      return { duplicationIssues };\r\n    } catch (err) {\r\n      console.error('Error in duplication detection:', err);\r\n      return { duplicationIssues: [] };\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Find duplicated code blocks\r\n   */\r\n  private findDuplications(\r\n    lines: string[], \r\n    minLines: number\r\n  ): Array<{firstStart: number, secondStart: number, length: number}> {\r\n    const duplications: Array<{firstStart: number, secondStart: number, length: number}> = [];\r\n    \r\n    // Simple O(n²) algorithm to find duplications\r\n    // In a real implementation, we'd use a more efficient algorithm like suffix trees\r\n    // or the Rabin-Karp algorithm with rolling hash\r\n    for (let i = 0; i < lines.length - minLines; i++) {\r\n      // Skip empty lines and common patterns like imports\r\n      if (this.shouldSkipLine(lines[i])) {\r\n        continue;\r\n      }\r\n      \r\n      for (let j = i + minLines; j < lines.length - minLines + 1; j++) {\r\n        // Skip if the starting lines don't match\r\n        if (lines[i] !== lines[j]) {\r\n          continue;\r\n        }\r\n        \r\n        // Check how many consecutive lines match\r\n        let matchLength = 1;\r\n        while (\r\n          matchLength < minLines &&\r\n          i + matchLength < lines.length &&\r\n          j + matchLength < lines.length &&\r\n          lines[i + matchLength] === lines[j + matchLength]\r\n        ) {\r\n          matchLength++;\r\n        }\r\n        \r\n        // If we found a match that meets the minimum length\r\n        if (matchLength >= minLines) {\r\n          // Check if this is a new duplication or overlapping with existing ones\r\n          const existingDuplication = duplications.find(d => \r\n            (i >= d.firstStart && i <= d.firstStart + d.length) || \r\n            (j >= d.secondStart && j <= d.secondStart + d.length)\r\n          );\r\n          \r\n          if (!existingDuplication) {\r\n            duplications.push({\r\n              firstStart: i,\r\n              secondStart: j,\r\n              length: matchLength\r\n            });\r\n          }\r\n          \r\n          // Skip to the end of this duplication to avoid overlapping matches\r\n          i += matchLength - 1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    \r\n    return duplications;\r\n  }\r\n  \r\n  /**\r\n   * Check if a line should be skipped for duplication detection\r\n   */\r\n  private shouldSkipLine(line: string): boolean {\r\n    const trimmedLine = line.trim();\r\n    \r\n    // Skip empty or very short lines\r\n    if (trimmedLine.length < 5) {\r\n      return true;\r\n    }\r\n    \r\n    // Skip comment lines\r\n    if (trimmedLine.startsWith('//') || \r\n        trimmedLine.startsWith('#') || \r\n        trimmedLine.startsWith('/*') || \r\n        trimmedLine.startsWith('*')) {\r\n      return true;\r\n    }\r\n    \r\n    // Skip common imports/includes\r\n    if (trimmedLine.startsWith('import ') || \r\n        trimmedLine.startsWith('using ') || \r\n        trimmedLine.startsWith('#include ')) {\r\n      return true;\r\n    }\r\n    \r\n    // Skip opening/closing braces\r\n    if (trimmedLine === '{' || trimmedLine === '}') {\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n}","// src/utils/styleAnalyzer.ts\r\nimport * as vscode from 'vscode';\r\nimport { StyleIssue } from '../codeAnalyzer';\r\n\r\ninterface StyleResult {\r\n  styleIssues: StyleIssue[];\r\n}\r\n\r\nexport class StyleAnalyzer {\r\n  /**\r\n   * Analyze code style consistency\r\n   */\r\n  public async analyze(code: string, languageId: string): Promise<StyleResult> {\r\n    const styleIssues: StyleIssue[] = [];\r\n    \r\n    try {\r\n      const lines = code.split('\\n');\r\n      \r\n      // Detect spacing inconsistencies\r\n      this.checkSpacingConsistency(lines, styleIssues);\r\n      \r\n      // Detect naming conventions\r\n      this.checkNamingConventions(code, languageId, styleIssues);\r\n      \r\n      // Detect line length issues\r\n      this.checkLineLengths(lines, styleIssues);\r\n      \r\n      return { styleIssues };\r\n    } catch (err) {\r\n      console.error('Error in style analysis:', err);\r\n      return { styleIssues: [] };\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Check for consistent spacing\r\n   */\r\n  private checkSpacingConsistency(lines: string[], issues: StyleIssue[]): void {\r\n    let indentType: 'spaces' | 'tabs' | null = null;\r\n    let indentSize = 0;\r\n    let lineNumber = 0;\r\n    \r\n    const indentStats = {\r\n      spaces2: 0,\r\n      spaces4: 0,\r\n      tabs: 0\r\n    };\r\n    \r\n    // First pass: detect indentation style\r\n    for (const line of lines) {\r\n      lineNumber++;\r\n      \r\n      if (line.trim().length === 0) {\r\n        continue;\r\n      }\r\n      \r\n      const leadingSpaces = line.match(/^( +)/);\r\n      const leadingTabs = line.match(/^(\\t+)/);\r\n      \r\n      if (leadingSpaces) {\r\n        const indent = leadingSpaces[1].length;\r\n        \r\n        if (indent % 2 === 0) {\r\n          indentStats.spaces2 += indent / 2;\r\n        }\r\n        \r\n        if (indent % 4 === 0) {\r\n          indentStats.spaces4 += indent / 4;\r\n        }\r\n      } else if (leadingTabs) {\r\n        indentStats.tabs += leadingTabs[1].length;\r\n      }\r\n    }\r\n    \r\n    // Determine dominant indentation style\r\n    if (indentStats.spaces2 > indentStats.spaces4 && indentStats.spaces2 > indentStats.tabs) {\r\n      indentType = 'spaces';\r\n      indentSize = 2;\r\n    } else if (indentStats.spaces4 > indentStats.spaces2 && indentStats.spaces4 > indentStats.tabs) {\r\n      indentType = 'spaces';\r\n      indentSize = 4;\r\n    } else if (indentStats.tabs > indentStats.spaces2 && indentStats.tabs > indentStats.spaces4) {\r\n      indentType = 'tabs';\r\n      indentSize = 1;\r\n    }\r\n    \r\n    // Skip if we couldn't determine indentation style\r\n    if (!indentType) {\r\n      return;\r\n    }\r\n    \r\n    // Second pass: check for inconsistencies\r\n    lineNumber = 0;\r\n    for (const line of lines) {\r\n      lineNumber++;\r\n      \r\n      if (line.trim().length === 0) {\r\n        continue;\r\n      }\r\n      \r\n      if (indentType === 'spaces') {\r\n        // Check for tabs in a spaces project\r\n        if (line.match(/^\\t+/)) {\r\n          issues.push({\r\n            line: lineNumber - 1,\r\n            message: `Line uses tabs for indentation, but project uses ${indentSize} spaces`,\r\n            rule: 'consistent-indentation'\r\n          });\r\n        } \r\n        // Check for inconsistent space counts\r\n        else if (indentSize === 2) {\r\n          const leadingSpaces = line.match(/^( +)/);\r\n          if (leadingSpaces && leadingSpaces[1].length % 2 !== 0) {\r\n            issues.push({\r\n              line: lineNumber - 1,\r\n              message: 'Line has inconsistent indentation (should be multiple of 2 spaces)',\r\n              rule: 'consistent-indentation'\r\n            });\r\n          }\r\n        } else if (indentSize === 4) {\r\n          const leadingSpaces = line.match(/^( +)/);\r\n          if (leadingSpaces && leadingSpaces[1].length % 4 !== 0) {\r\n            issues.push({\r\n              line: lineNumber - 1,\r\n              message: 'Line has inconsistent indentation (should be multiple of 4 spaces)',\r\n              rule: 'consistent-indentation'\r\n            });\r\n          }\r\n        }\r\n      } else if (indentType === 'tabs') {\r\n        // Check for spaces in a tabs project\r\n        if (line.match(/^ +/)) {\r\n          issues.push({\r\n            line: lineNumber - 1,\r\n            message: 'Line uses spaces for indentation, but project uses tabs',\r\n            rule: 'consistent-indentation'\r\n          });\r\n        }\r\n      }\r\n      \r\n      // Check spacing around operators\r\n      if (line.match(/[a-zA-Z0-9]=[a-zA-Z0-9]/)) {\r\n        issues.push({\r\n          line: lineNumber - 1,\r\n          message: 'Missing spaces around equals operator',\r\n          rule: 'operator-spacing'\r\n        });\r\n      }\r\n      \r\n      // Check spacing after commas\r\n      if (line.match(/,[a-zA-Z0-9]/)) {\r\n        issues.push({\r\n          line: lineNumber - 1,\r\n          message: 'Missing space after comma',\r\n          rule: 'comma-spacing'\r\n        });\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Check naming conventions\r\n   */\r\n  private checkNamingConventions(code: string, languageId: string, issues: StyleIssue[]): void {\r\n    // Different conventions for different languages\r\n    switch (languageId) {\r\n      case 'javascript':\r\n      case 'typescript':\r\n      case 'javascriptreact':\r\n      case 'typescriptreact':\r\n        this.checkJavaScriptNaming(code, issues);\r\n        break;\r\n      case 'python':\r\n        this.checkPythonNaming(code, issues);\r\n        break;\r\n      case 'csharp':\r\n        this.checkCSharpNaming(code, issues);\r\n        break;\r\n      // Add more language-specific checks as needed\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Check JavaScript/TypeScript naming conventions\r\n   */\r\n  private checkJavaScriptNaming(code: string, issues: StyleIssue[]): void {\r\n    const lines = code.split('\\n');\r\n    let lineNumber = 0;\r\n    \r\n    // Check variable declarations\r\n    const constRegex = /const\\s+([A-Z_][A-Z0-9_]*)\\s*=/g;\r\n    const letVarRegex = /(let|var)\\s+([A-Z_][A-Z0-9_]*)\\s*=/g;\r\n    const functionRegex = /function\\s+([a-z_][a-zA-Z0-9]*)([A-Z])/g;\r\n    const classRegex = /class\\s+([a-z][a-zA-Z0-9]*)\\s/g;\r\n    \r\n    for (const line of lines) {\r\n      lineNumber++;\r\n      \r\n      // Check for constants using lowercase\r\n      const constMatch = [...line.matchAll(constRegex)];\r\n      for (const match of constMatch) {\r\n        if (match[1].toUpperCase() === match[1] && !match[1].includes('_')) {\r\n          issues.push({\r\n            line: lineNumber - 1,\r\n            message: `Constant ${match[1]} should use UPPER_SNAKE_CASE`,\r\n            rule: 'naming-convention'\r\n          });\r\n        }\r\n      }\r\n      \r\n      // Check let/var using uppercase\r\n      const letVarMatch = [...line.matchAll(letVarRegex)];\r\n      for (const match of letVarMatch) {\r\n        issues.push({\r\n          line: lineNumber - 1,\r\n          message: `Variable ${match[2]} should use camelCase, not UPPER_CASE`,\r\n          rule: 'naming-convention'\r\n        });\r\n      }\r\n      \r\n      // Check function names\r\n      const functionMatch = [...line.matchAll(functionRegex)];\r\n      for (const match of functionMatch) {\r\n        issues.push({\r\n          line: lineNumber - 1,\r\n          message: `Function name ${match[1]}${match[2]} should use camelCase`,\r\n          rule: 'naming-convention'\r\n        });\r\n      }\r\n      \r\n      // Check class names\r\n      const classMatch = [...line.matchAll(classRegex)];\r\n      for (const match of classMatch) {\r\n        issues.push({\r\n          line: lineNumber - 1,\r\n          message: `Class name ${match[1]} should use PascalCase`,\r\n          rule: 'naming-convention'\r\n        });\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Check Python naming conventions\r\n   */\r\n  private checkPythonNaming(code: string, issues: StyleIssue[]): void {\r\n    const lines = code.split('\\n');\r\n    let lineNumber = 0;\r\n    \r\n    const functionRegex = /def\\s+([A-Z][a-zA-Z0-9_]*)\\s*\\(/g;\r\n    const classRegex = /class\\s+([a-z][a-zA-Z0-9_]*)\\s*[:\\(]/g;\r\n    const constantRegex = /([a-z][a-zA-Z0-9_]*)\\s*=\\s*[^=]/g;\r\n    \r\n    for (const line of lines) {\r\n      lineNumber++;\r\n      \r\n      // Check function names (should be snake_case)\r\n      const functionMatch = [...line.matchAll(functionRegex)];\r\n      for (const match of functionMatch) {\r\n        issues.push({\r\n          line: lineNumber - 1,\r\n          message: `Function name ${match[1]} should use snake_case, not PascalCase`,\r\n          rule: 'naming-convention'\r\n        });\r\n      }\r\n      \r\n      // Check class names (should be PascalCase)\r\n      const classMatch = [...line.matchAll(classRegex)];\r\n      for (const match of classMatch) {\r\n        issues.push({\r\n          line: lineNumber - 1,\r\n          message: `Class name ${match[1]} should use PascalCase, not snake_case`,\r\n          rule: 'naming-convention'\r\n        });\r\n      }\r\n      \r\n      // Check for constants at module level\r\n      if (line.match(/^[A-Za-z]/)) {\r\n        const constantMatch = [...line.matchAll(constantRegex)];\r\n        for (const match of constantMatch) {\r\n          if (match[1].toUpperCase() === match[1] && match[1].length > 2 && !match[1].includes('_')) {\r\n            issues.push({\r\n              line: lineNumber - 1,\r\n              message: `Constant ${match[1]} should use UPPER_SNAKE_CASE`,\r\n              rule: 'naming-convention'\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Check C# naming conventions\r\n   */\r\n  private checkCSharpNaming(code: string, issues: StyleIssue[]): void {\r\n    const lines = code.split('\\n');\r\n    let lineNumber = 0;\r\n    \r\n    const privateFieldRegex = /private\\s+[a-zA-Z0-9_<>]+\\s+([a-zA-Z0-9_]+)\\s*;/g;\r\n    const publicMethodRegex = /public\\s+[a-zA-Z0-9_<>]+\\s+([a-z][a-zA-Z0-9_]*)\\s*\\(/g;\r\n    const privateMethodRegex = /private\\s+[a-zA-Z0-9_<>]+\\s+([A-Z][a-zA-Z0-9_]*)\\s*\\(/g;\r\n    \r\n    for (const line of lines) {\r\n      lineNumber++;\r\n      \r\n      // Check private fields (should start with _)\r\n      const privateFieldMatch = [...line.matchAll(privateFieldRegex)];\r\n      for (const match of privateFieldMatch) {\r\n        if (!match[1].startsWith('_')) {\r\n          issues.push({\r\n            line: lineNumber - 1,\r\n            message: `Private field ${match[1]} should start with underscore (_)`,\r\n            rule: 'naming-convention'\r\n          });\r\n        }\r\n      }\r\n      \r\n      // Check public methods (should be PascalCase)\r\n      const publicMethodMatch = [...line.matchAll(publicMethodRegex)];\r\n      for (const match of publicMethodMatch) {\r\n        issues.push({\r\n          line: lineNumber - 1,\r\n          message: `Public method ${match[1]} should use PascalCase, not camelCase`,\r\n          rule: 'naming-convention'\r\n        });\r\n      }\r\n      \r\n      // Check private methods (should be camelCase)\r\n      const privateMethodMatch = [...line.matchAll(privateMethodRegex)];\r\n      for (const match of privateMethodMatch) {\r\n        issues.push({\r\n          line: lineNumber - 1,\r\n          message: `Private method ${match[1]} should use camelCase, not PascalCase`,\r\n          rule: 'naming-convention'\r\n        });\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Check line lengths\r\n   */\r\n  private checkLineLengths(lines: string[], issues: StyleIssue[]): void {\r\n    const MAX_LINE_LENGTH = 100;\r\n    let lineNumber = 0;\r\n    \r\n    for (const line of lines) {\r\n      lineNumber++;\r\n      \r\n      if (line.length > MAX_LINE_LENGTH) {\r\n        issues.push({\r\n          line: lineNumber - 1,\r\n          message: `Line exceeds maximum length of ${MAX_LINE_LENGTH} characters`,\r\n          rule: 'max-line-length'\r\n        });\r\n      }\r\n    }\r\n  }\r\n}","// src/metricsCollector.ts\r\nimport * as vscode from 'vscode';\r\nimport * as path from 'path';\r\nimport { AnalysisResult } from './codeAnalyzer';\r\n\r\ninterface FileMetrics {\r\n  healthScore: number;\r\n  lastUpdated: number;\r\n  complexity: {\r\n    average: number;\r\n    max: number;\r\n    count: number;\r\n  };\r\n  duplication: {\r\n    percentage: number;\r\n    lineCount: number;\r\n  };\r\n  styleIssues: number;\r\n  totalLines: number;\r\n  codeLines: number;\r\n  commentLines: number;\r\n}\r\n\r\ninterface ProjectMetrics {\r\n  timestamp: number;\r\n  overallHealth: number;\r\n  complexityData: {\r\n    low: number;    // 1-5\r\n    medium: number; // 6-10\r\n    high: number;   // 11-20\r\n    veryHigh: number; // 21+\r\n  };\r\n  averageComplexity: number;\r\n  duplicationPercentage: number;\r\n  codeCommentRatio: number;\r\n  codeChanges: number;\r\n  fileMetrics: Record<string, FileMetrics>;\r\n}\r\n\r\ninterface HistoricalMetric {\r\n  timestamp: number;\r\n  overallHealth: number;\r\n  codeChanges: number;\r\n}\r\n\r\n// Maximum number of historical metrics to store\r\nconst MAX_HISTORY = 30;\r\n\r\nexport class MetricsCollector {\r\n  private globalState: vscode.Memento;\r\n  private currentMetrics: ProjectMetrics;\r\n  private historicalMetrics: HistoricalMetric[];\r\n  \r\n  constructor(globalState: vscode.Memento) {\r\n    this.globalState = globalState;\r\n    \r\n    // Load metrics from state or initialize with defaults\r\n    this.currentMetrics = this.loadMetrics() || this.createDefaultMetrics();\r\n    this.historicalMetrics = this.loadHistoricalMetrics() || [];\r\n  }\r\n  \r\n  /**\r\n   * Record metrics for a specific file\r\n   */\r\n  public recordMetrics(filePath: string, analysisResult: AnalysisResult): void {\r\n    // Skip if we don't have results\r\n    if (!analysisResult || !analysisResult.metrics) {\r\n      return;\r\n    }\r\n    \r\n    const metrics = analysisResult.metrics;\r\n    const normalizedPath = this.normalizePath(filePath);\r\n    \r\n    // Calculate complexity data\r\n    const complexityData = {\r\n      low: 0,\r\n      medium: 0,\r\n      high: 0,\r\n      veryHigh: 0\r\n    };\r\n    \r\n    analysisResult.complexityIssues.forEach(issue => {\r\n      if (issue.complexity <= 5) {\r\n        complexityData.low++;\r\n      } else if (issue.complexity <= 10) {\r\n        complexityData.medium++;\r\n      } else if (issue.complexity <= 20) {\r\n        complexityData.high++;\r\n      } else {\r\n        complexityData.veryHigh++;\r\n      }\r\n    });\r\n    \r\n    // Store file metrics\r\n    const fileMetrics: FileMetrics = {\r\n      healthScore: analysisResult.overallHealth,\r\n      lastUpdated: Date.now(),\r\n      complexity: {\r\n        average: metrics.averageComplexity,\r\n        max: metrics.maxComplexity,\r\n        count: metrics.functionCount\r\n      },\r\n      duplication: {\r\n        percentage: metrics.duplicationPercentage,\r\n        lineCount: Math.round((metrics.totalLines * metrics.duplicationPercentage) / 100)\r\n      },\r\n      styleIssues: analysisResult.styleIssues.length,\r\n      totalLines: metrics.totalLines,\r\n      codeLines: metrics.codeLines,\r\n      commentLines: metrics.commentLines\r\n    };\r\n    \r\n    // Store in current metrics\r\n    this.currentMetrics.fileMetrics[normalizedPath] = fileMetrics;\r\n    \r\n    // Update project-wide metrics\r\n    this.updateProjectMetrics();\r\n    \r\n    // Save to storage\r\n    this.saveMetrics();\r\n    this.saveHistoricalMetrics();\r\n  }\r\n  \r\n  /**\r\n   * Get file metrics for a specific file\r\n   */\r\n  public getFileMetrics(filePath: string): FileMetrics | undefined {\r\n    const normalizedPath = this.normalizePath(filePath);\r\n    return this.currentMetrics.fileMetrics[normalizedPath];\r\n  }\r\n  \r\n  /**\r\n   * Get all metrics\r\n   */\r\n  public getAllMetrics(): ProjectMetrics {\r\n    return this.currentMetrics;\r\n  }\r\n  \r\n  /**\r\n   * Get historical metrics\r\n   */\r\n  public getHistoricalMetrics(): HistoricalMetric[] {\r\n    return this.historicalMetrics;\r\n  }\r\n  \r\n  /**\r\n   * Clear metrics for a specific file\r\n   */\r\n  public clearFileMetrics(filePath: string): void {\r\n    const normalizedPath = this.normalizePath(filePath);\r\n    delete this.currentMetrics.fileMetrics[normalizedPath];\r\n    this.updateProjectMetrics();\r\n    this.saveMetrics();\r\n  }\r\n  \r\n  /**\r\n   * Clear all metrics\r\n   */\r\n  public clearAllMetrics(): void {\r\n    this.currentMetrics = this.createDefaultMetrics();\r\n    this.historicalMetrics = [];\r\n    this.saveMetrics();\r\n    this.saveHistoricalMetrics();\r\n  }\r\n  \r\n  /**\r\n   * Update project-wide metrics based on file metrics\r\n   */\r\n  private updateProjectMetrics(): void {\r\n    const fileMetrics = Object.values(this.currentMetrics.fileMetrics);\r\n    \r\n    if (fileMetrics.length === 0) {\r\n      this.currentMetrics.overallHealth = 0;\r\n      this.currentMetrics.averageComplexity = 0;\r\n      this.currentMetrics.duplicationPercentage = 0;\r\n      this.currentMetrics.codeCommentRatio = 0;\r\n      this.currentMetrics.complexityData = { low: 0, medium: 0, high: 0, veryHigh: 0 };\r\n      return;\r\n    }\r\n    \r\n    // Calculate weighted health score based on file size\r\n    let totalLines = 0;\r\n    let weightedHealthSum = 0;\r\n    let totalComplexitySum = 0;\r\n    let totalComplexityCount = 0;\r\n    let totalDuplicatedLines = 0;\r\n    let totalCodeLines = 0;\r\n    let totalCommentLines = 0;\r\n    \r\n    const complexityData = { low: 0, medium: 0, high: 0, veryHigh: 0 };\r\n    \r\n    fileMetrics.forEach(metric => {\r\n      const weight = metric.totalLines;\r\n      totalLines += weight;\r\n      weightedHealthSum += metric.healthScore * weight;\r\n      \r\n      totalComplexitySum += metric.complexity.average * metric.complexity.count;\r\n      totalComplexityCount += metric.complexity.count;\r\n      \r\n      totalDuplicatedLines += metric.duplication.lineCount;\r\n      totalCodeLines += metric.codeLines;\r\n      totalCommentLines += metric.commentLines;\r\n      \r\n      // Sum complexity counts\r\n      const complexityCounts = this.calculateComplexityCounts(\r\n        metric.complexity.average, \r\n        metric.complexity.count\r\n      );\r\n      \r\n      complexityData.low += complexityCounts.low;\r\n      complexityData.medium += complexityCounts.medium;\r\n      complexityData.high += complexityCounts.high;\r\n      complexityData.veryHigh += complexityCounts.veryHigh;\r\n    });\r\n    \r\n    // Update project metrics\r\n    this.currentMetrics.timestamp = Date.now();\r\n    this.currentMetrics.overallHealth = totalLines > 0 ? weightedHealthSum / totalLines : 0;\r\n    this.currentMetrics.averageComplexity = totalComplexityCount > 0 ? totalComplexitySum / totalComplexityCount : 0;\r\n    this.currentMetrics.duplicationPercentage = totalLines > 0 ? (totalDuplicatedLines / totalLines) * 100 : 0;\r\n    this.currentMetrics.codeCommentRatio = totalCommentLines > 0 ? totalCodeLines / totalCommentLines : 0;\r\n    this.currentMetrics.complexityData = complexityData;\r\n    \r\n    // Update historical metrics (daily record)\r\n    this.updateHistoricalMetrics();\r\n  }\r\n  \r\n  /**\r\n   * Calculate approximate distribution of complexity values\r\n   */\r\n  private calculateComplexityCounts(\r\n    averageComplexity: number, \r\n    count: number\r\n  ): { low: number, medium: number, high: number, veryHigh: number } {\r\n    // This is a simplified approximation based on average complexity\r\n    // In a real implementation, we'd track exact distributions\r\n    \r\n    const result = { low: 0, medium: 0, high: 0, veryHigh: 0 };\r\n    \r\n    if (count === 0) {\r\n      return result;\r\n    }\r\n    \r\n    if (averageComplexity <= 5) {\r\n      // Mostly low complexity\r\n      result.low = Math.round(count * 0.8);\r\n      result.medium = count - result.low;\r\n    } else if (averageComplexity <= 10) {\r\n      // Mostly medium complexity\r\n      result.medium = Math.round(count * 0.6);\r\n      result.low = Math.round(count * 0.3);\r\n      result.high = count - result.medium - result.low;\r\n    } else if (averageComplexity <= 15) {\r\n      // Mix of medium and high\r\n      result.medium = Math.round(count * 0.4);\r\n      result.high = Math.round(count * 0.4);\r\n      result.low = Math.round(count * 0.1);\r\n      result.veryHigh = count - result.medium - result.high - result.low;\r\n    } else {\r\n      // Mostly high and very high\r\n      result.high = Math.round(count * 0.5);\r\n      result.veryHigh = Math.round(count * 0.3);\r\n      result.medium = Math.round(count * 0.2);\r\n      result.low = count - result.high - result.veryHigh - result.medium;\r\n    }\r\n    \r\n    return result;\r\n  }\r\n  \r\n  /**\r\n   * Update historical metrics\r\n   */\r\n  private updateHistoricalMetrics(): void {\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n    const todayTimestamp = today.getTime();\r\n    \r\n    // Check if we already have an entry for today\r\n    const todayEntryIndex = this.historicalMetrics.findIndex(\r\n      metric => {\r\n        const metricDate = new Date(metric.timestamp);\r\n        metricDate.setHours(0, 0, 0, 0);\r\n        return metricDate.getTime() === todayTimestamp;\r\n      }\r\n    );\r\n    \r\n    if (todayEntryIndex !== -1) {\r\n      // Update today's entry\r\n      this.historicalMetrics[todayEntryIndex] = {\r\n        timestamp: todayTimestamp,\r\n        overallHealth: this.currentMetrics.overallHealth,\r\n        codeChanges: this.historicalMetrics[todayEntryIndex].codeChanges + 1\r\n      };\r\n    } else {\r\n      // Add new entry for today\r\n      this.historicalMetrics.push({\r\n        timestamp: todayTimestamp,\r\n        overallHealth: this.currentMetrics.overallHealth,\r\n        codeChanges: 1\r\n      });\r\n      \r\n      // Limit history size\r\n      if (this.historicalMetrics.length > MAX_HISTORY) {\r\n        this.historicalMetrics = this.historicalMetrics.slice(-MAX_HISTORY);\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Create default metrics object\r\n   */\r\n  private createDefaultMetrics(): ProjectMetrics {\r\n    return {\r\n      timestamp: Date.now(),\r\n      overallHealth: 0,\r\n      complexityData: {\r\n        low: 0,\r\n        medium: 0,\r\n        high: 0,\r\n        veryHigh: 0\r\n      },\r\n      averageComplexity: 0,\r\n      duplicationPercentage: 0,\r\n      codeCommentRatio: 0,\r\n      codeChanges: 0,\r\n      fileMetrics: {}\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Normalize file path to use as key\r\n   */\r\n  private normalizePath(filePath: string): string {\r\n    // Use path relative to workspace if possible\r\n    const workspaceFolders = vscode.workspace.workspaceFolders;\r\n    if (workspaceFolders && workspaceFolders.length > 0) {\r\n      const workspacePath = workspaceFolders[0].uri.fsPath;\r\n      if (filePath.startsWith(workspacePath)) {\r\n        return filePath.substring(workspacePath.length);\r\n      }\r\n    }\r\n    \r\n    return filePath;\r\n  }\r\n  \r\n  /**\r\n   * Load metrics from storage\r\n   */\r\n  private loadMetrics(): ProjectMetrics | undefined {\r\n    const metrics = this.globalState.get<ProjectMetrics>('codepulse.metrics');\r\n    return metrics;\r\n  }\r\n  \r\n  /**\r\n   * Save metrics to storage\r\n   */\r\n  private saveMetrics(): void {\r\n    this.globalState.update('codepulse.metrics', this.currentMetrics);\r\n  }\r\n  \r\n  /**\r\n   * Load historical metrics from storage\r\n   */\r\n  private loadHistoricalMetrics(): HistoricalMetric[] | undefined {\r\n    return this.globalState.get<HistoricalMetric[]>('codepulse.historicalMetrics');\r\n  }\r\n  \r\n  /**\r\n   * Save historical metrics to storage\r\n   */\r\n  private saveHistoricalMetrics(): void {\r\n    this.globalState.update('codepulse.historicalMetrics', this.historicalMetrics);\r\n  }\r\n}","// src/suggestionProvider.ts\r\nimport * as vscode from 'vscode';\r\nimport { AnalysisResult, ComplexityIssue, DuplicationIssue, StyleIssue } from './codeAnalyzer';\r\n\r\nexport interface Suggestion {\r\n  title: string;\r\n  description: string;\r\n  actionType: 'refactor' | 'info';\r\n  edit?: vscode.WorkspaceEdit;\r\n  issueType: 'complexity' | 'duplication' | 'style';\r\n  location: vscode.Range;\r\n}\r\n\r\nexport class SuggestionProvider {\r\n  /**\r\n   * Provide refactoring and improvement suggestions based on analysis results\r\n   */\r\n  public provideSuggestions(\r\n    document: vscode.TextDocument, \r\n    analysisResult: AnalysisResult\r\n  ): Suggestion[] {\r\n    const suggestions: Suggestion[] = [];\r\n    \r\n    // Generate suggestions for complexity issues\r\n    for (const issue of analysisResult.complexityIssues) {\r\n      const suggestion = this.createComplexitySuggestion(document, issue);\r\n      if (suggestion) {\r\n        suggestions.push(suggestion);\r\n      }\r\n    }\r\n    \r\n    // Generate suggestions for duplication issues\r\n    for (const issue of analysisResult.duplicationIssues) {\r\n      const suggestion = this.createDuplicationSuggestion(document, issue);\r\n      if (suggestion) {\r\n        suggestions.push(suggestion);\r\n      }\r\n    }\r\n    \r\n    // Generate suggestions for style issues\r\n    for (const issue of analysisResult.styleIssues) {\r\n      const suggestion = this.createStyleSuggestion(document, issue);\r\n      if (suggestion) {\r\n        suggestions.push(suggestion);\r\n      }\r\n    }\r\n    \r\n    return suggestions;\r\n  }\r\n  \r\n  /**\r\n   * Create suggestion for complexity issue\r\n   */\r\n  private createComplexitySuggestion(\r\n    document: vscode.TextDocument, \r\n    issue: ComplexityIssue\r\n  ): Suggestion | null {\r\n    try {\r\n      const line = issue.line;\r\n      const lineText = document.lineAt(line).text;\r\n      \r\n      // Create range for the function or block\r\n      let startLine = line;\r\n      let endLine = line;\r\n      \r\n      // Find opening and closing braces for the function\r\n      let blockFound = false;\r\n      let braceBalance = 0;\r\n      let inFunction = false;\r\n      \r\n      // Look for function signature\r\n      if (lineText.includes('function') || lineText.match(/\\w+\\s*\\(/)) {\r\n        inFunction = true;\r\n      }\r\n      \r\n      // Find block limits\r\n      if (inFunction) {\r\n        for (let i = line; i < document.lineCount; i++) {\r\n          const currentLine = document.lineAt(i).text;\r\n          \r\n          if (!blockFound && currentLine.includes('{')) {\r\n            blockFound = true;\r\n          }\r\n          \r\n          if (blockFound) {\r\n            braceBalance += (currentLine.match(/{/g) || []).length;\r\n            braceBalance -= (currentLine.match(/}/g) || []).length;\r\n            \r\n            if (braceBalance === 0) {\r\n              endLine = i;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      \r\n      const range = new vscode.Range(\r\n        new vscode.Position(startLine, 0),\r\n        new vscode.Position(endLine, document.lineAt(endLine).text.length)\r\n      );\r\n      \r\n      // Generate suggestion based on complexity\r\n      if (issue.complexity > 20) {\r\n        return {\r\n          title: `Split function \"${issue.functionName}\" into smaller functions`,\r\n          description: `This function has very high complexity (${issue.complexity}). Consider splitting it into smaller, more focused functions.`,\r\n          actionType: 'info',\r\n          issueType: 'complexity',\r\n          location: range\r\n        };\r\n      } else if (issue.complexity > 10) {\r\n        return {\r\n          title: `Simplify function \"${issue.functionName}\"`,\r\n          description: `This function has high complexity (${issue.complexity}). Look for repeated logic or nested conditions that could be extracted.`,\r\n          actionType: 'info',\r\n          issueType: 'complexity',\r\n          location: range\r\n        };\r\n      }\r\n    } catch (err) {\r\n      console.error('Error creating complexity suggestion:', err);\r\n    }\r\n    \r\n    return null;\r\n  }\r\n  \r\n  /**\r\n   * Create suggestion for duplication issue\r\n   */\r\n  private createDuplicationSuggestion(\r\n    document: vscode.TextDocument, \r\n    issue: DuplicationIssue\r\n  ): Suggestion | null {\r\n    try {\r\n      const startLine = issue.startLine;\r\n      const endLine = issue.endLine;\r\n      \r\n      // Extract the duplicated code\r\n      let duplicatedCode = '';\r\n      for (let i = startLine; i <= endLine; i++) {\r\n        duplicatedCode += document.lineAt(i).text + '\\n';\r\n      }\r\n      \r\n      const lines = duplicatedCode.split('\\n');\r\n      const firstLine = lines[0].trim();\r\n      const lastLine = lines[lines.length - 2].trim(); // Last non-empty line\r\n      \r\n      const range = new vscode.Range(\r\n        new vscode.Position(startLine, 0),\r\n        new vscode.Position(endLine, document.lineAt(endLine).text.length)\r\n      );\r\n      \r\n      // Check duplicated code type and make specific suggestions\r\n      if (duplicatedCode.includes('if') || duplicatedCode.includes('switch')) {\r\n        return {\r\n          title: `Extract duplicated conditional logic into a helper function`,\r\n          description: `This code block appears multiple times. Extract it into a reusable function.`,\r\n          actionType: 'info',\r\n          issueType: 'duplication',\r\n          location: range\r\n        };\r\n      } else if (duplicatedCode.match(/for|while|forEach|map|filter|reduce/)) {\r\n        return {\r\n          title: `Extract duplicated loop into a utility function`,\r\n          description: `This loop logic appears multiple times. Extract it into a reusable function.`,\r\n          actionType: 'info',\r\n          issueType: 'duplication',\r\n          location: range\r\n        };\r\n      } else {\r\n        return {\r\n          title: `Extract duplicated code starting with \"${firstLine.substring(0, 30)}...\"`,\r\n          description: `This code block of ${endLine - startLine + 1} lines appears multiple times. Extract it into a reusable function.`,\r\n          actionType: 'info',\r\n          issueType: 'duplication',\r\n          location: range\r\n        };\r\n      }\r\n    } catch (err) {\r\n      console.error('Error creating duplication suggestion:', err);\r\n    }\r\n    \r\n    return null;\r\n  }\r\n  \r\n  /**\r\n   * Create suggestion for style issue\r\n   */\r\n  private createStyleSuggestion(\r\n    document: vscode.TextDocument, \r\n    issue: StyleIssue\r\n  ): Suggestion | null {\r\n    try {\r\n      const line = issue.line;\r\n      const lineText = document.lineAt(line).text;\r\n      const range = new vscode.Range(\r\n        new vscode.Position(line, 0),\r\n        new vscode.Position(line, lineText.length)\r\n      );\r\n      \r\n      // Create suggestion based on rule type\r\n      switch (issue.rule) {\r\n        case 'consistent-indentation': {\r\n          // Fix indentation\r\n          const workspaceEdit = new vscode.WorkspaceEdit();\r\n          const indentMatch = lineText.match(/^[\\t ]+/);\r\n          \r\n          if (indentMatch) {\r\n            const currentIndent = indentMatch[0];\r\n            const leadingSpaceCount = currentIndent.replace(/\\t/g, '    ').length;\r\n            const config = vscode.workspace.getConfiguration('editor');\r\n            const useSpaces = config.get('insertSpaces');\r\n            const tabSize = config.get('tabSize') as number || 4;\r\n            \r\n            let properIndent = '';\r\n            if (useSpaces) {\r\n              // Round to nearest multiple of tabSize\r\n              const properSpaceCount = Math.round(leadingSpaceCount / tabSize) * tabSize;\r\n              properIndent = ' '.repeat(properSpaceCount);\r\n            } else {\r\n              // Convert to tabs\r\n              const tabCount = Math.round(leadingSpaceCount / tabSize);\r\n              properIndent = '\\t'.repeat(tabCount);\r\n            }\r\n            \r\n            const fixedLine = properIndent + lineText.trimLeft();\r\n            workspaceEdit.replace(document.uri, range, fixedLine);\r\n            \r\n            return {\r\n              title: 'Fix indentation to match project style',\r\n              description: issue.message,\r\n              actionType: 'refactor',\r\n              edit: workspaceEdit,\r\n              issueType: 'style',\r\n              location: range\r\n            };\r\n          }\r\n          break;\r\n        }\r\n        \r\n        case 'operator-spacing': {\r\n          // Fix spacing around operators\r\n          const workspaceEdit = new vscode.WorkspaceEdit();\r\n          const fixedLine = lineText\r\n            .replace(/(\\w+)=(\\w+)/g, '$1 = $2')\r\n            .replace(/(\\w+)\\+=(\\w+)/g, '$1 += $2')\r\n            .replace(/(\\w+)-=(\\w+)/g, '$1 -= $2')\r\n            .replace(/(\\w+)\\*=(\\w+)/g, '$1 *= $2')\r\n            .replace(/(\\w+)\\/=(\\w+)/g, '$1 /= $2');\r\n            \r\n          workspaceEdit.replace(document.uri, range, fixedLine);\r\n          \r\n          return {\r\n            title: 'Add spaces around operators',\r\n            description: issue.message,\r\n            actionType: 'refactor',\r\n            edit: workspaceEdit,\r\n            issueType: 'style',\r\n            location: range\r\n          };\r\n        }\r\n        \r\n        case 'comma-spacing': {\r\n          // Fix spacing after commas\r\n          const workspaceEdit = new vscode.WorkspaceEdit();\r\n          const fixedLine = lineText.replace(/,(\\w)/g, ', $1');\r\n          workspaceEdit.replace(document.uri, range, fixedLine);\r\n          \r\n          return {\r\n            title: 'Add spaces after commas',\r\n            description: issue.message,\r\n            actionType: 'refactor',\r\n            edit: workspaceEdit,\r\n            issueType: 'style',\r\n            location: range\r\n          };\r\n        }\r\n        \r\n        case 'naming-convention': {\r\n          // Just highlight naming convention issues, don't auto-fix\r\n          return {\r\n            title: 'Review naming convention',\r\n            description: issue.message,\r\n            actionType: 'info',\r\n            issueType: 'style',\r\n            location: range\r\n          };\r\n        }\r\n        \r\n        case 'max-line-length': {\r\n          return {\r\n            title: 'Consider breaking long line into multiple lines',\r\n            description: issue.message,\r\n            actionType: 'info',\r\n            issueType: 'style',\r\n            location: range\r\n          };\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.error('Error creating style suggestion:', err);\r\n    }\r\n    \r\n    return null;\r\n  }\r\n}","// src/dashboardView.ts\r\nimport * as vscode from 'vscode';\r\nimport * as path from 'path';\r\nimport { MetricsCollector } from './metricsCollector';\r\n\r\nexport class DashboardView {\r\n  private panel: vscode.WebviewPanel | undefined;\r\n  private context: vscode.ExtensionContext;\r\n  private metricsCollector: MetricsCollector;\r\n  \r\n  constructor(context: vscode.ExtensionContext, metricsCollector: MetricsCollector) {\r\n    this.context = context;\r\n    this.metricsCollector = metricsCollector;\r\n  }\r\n  \r\n  public show() {\r\n    // If we already have a panel, show it\r\n    if (this.panel) {\r\n      this.panel.reveal();\r\n      return;\r\n    }\r\n    \r\n    // Create and show a new webview panel\r\n    this.panel = vscode.window.createWebviewPanel(\r\n      'codepulseDashboard', // Identifies the type of panel\r\n      'CodePulse Dashboard', // Title displayed to the user\r\n      vscode.ViewColumn.One, // Editor column to show in\r\n      {\r\n        // Enable scripts in the webview\r\n        enableScripts: true,\r\n        // Restrict the webview to only load resources from the extension's directory\r\n        localResourceRoots: [vscode.Uri.file(path.join(this.context.extensionPath, 'views'))]\r\n      }\r\n    );\r\n    \r\n    // Set initial HTML content\r\n    this.updateWebviewContent();\r\n    \r\n    // Handle messages from the webview\r\n    this.panel.webview.onDidReceiveMessage(\r\n      message => {\r\n        switch (message.command) {\r\n          case 'getMetrics':\r\n            // Send the metrics to the webview\r\n            this.sendMetricsToWebview();\r\n            return;\r\n          case 'refreshMetrics':\r\n            // Refresh metrics and send them to the webview\r\n            this.updateWebviewContent();\r\n            return;\r\n        }\r\n      },\r\n      undefined,\r\n      this.context.subscriptions\r\n    );\r\n    \r\n    // Handle panel disposal\r\n    this.panel.onDidDispose(\r\n      () => {\r\n        this.panel = undefined;\r\n      },\r\n      null,\r\n      this.context.subscriptions\r\n    );\r\n  }\r\n  \r\n  private updateWebviewContent() {\r\n    if (!this.panel) {\r\n      return;\r\n    }\r\n    \r\n    this.panel.webview.html = this.getWebviewContent();\r\n    this.sendMetricsToWebview();\r\n  }\r\n  \r\n  private sendMetricsToWebview() {\r\n    if (!this.panel) {\r\n      return;\r\n    }\r\n    \r\n    // Get metrics from collector\r\n    const allMetrics = this.metricsCollector.getAllMetrics();\r\n    const historicalMetrics = this.metricsCollector.getHistoricalMetrics();\r\n    \r\n    console.log('Sending metrics to webview:', JSON.stringify(allMetrics));\r\n    \r\n    // Send data to webview\r\n    this.panel.webview.postMessage({\r\n      command: 'setMetrics',\r\n      metrics: allMetrics,\r\n      historicalMetrics: historicalMetrics\r\n    });\r\n  }\r\n  \r\n  private getWebviewContent() {\r\n    // Get path to Chart.js script - try multiple possible locations\r\n    let chartJsPath: vscode.Uri | undefined;\r\n    try {\r\n      // First try UMD version\r\n      const umdPath = path.join(this.context.extensionPath, 'node_modules', 'chart.js', 'dist', 'chart.umd.js');\r\n      \r\n      // Check if file exists\r\n      const fs = require('fs');\r\n      if (fs.existsSync(umdPath)) {\r\n        chartJsPath = vscode.Uri.file(umdPath);\r\n      } else {\r\n        // Try the minified version\r\n        const minPath = path.join(this.context.extensionPath, 'node_modules', 'chart.js', 'dist', 'chart.min.js');\r\n        \r\n        if (fs.existsSync(minPath)) {\r\n          chartJsPath = vscode.Uri.file(minPath);\r\n        } else {\r\n          // Try the regular version\r\n          const regPath = path.join(this.context.extensionPath, 'node_modules', 'chart.js', 'dist', 'chart.js');\r\n          if (fs.existsSync(regPath)) {\r\n            chartJsPath = vscode.Uri.file(regPath);\r\n          } else {\r\n            // Last resort - use a fallback mechanism\r\n            console.error('Chart.js not found in any expected location');\r\n            chartJsPath = vscode.Uri.file(path.join(this.context.extensionPath, 'node_modules', 'chart.js', 'dist', 'chart.umd.js'));\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error finding Chart.js:', error);\r\n      // Fallback path\r\n      chartJsPath = vscode.Uri.file(path.join(this.context.extensionPath, 'node_modules', 'chart.js', 'dist', 'chart.umd.js'));\r\n    }\r\n    \r\n    const chartJsUri = this.panel!.webview.asWebviewUri(chartJsPath);\r\n    console.log('Chart.js script URI:', chartJsUri.toString());\r\n    \r\n    // Get path to dashboard CSS\r\n    const cssPath = vscode.Uri.file(\r\n      path.join(this.context.extensionPath, 'views', 'css', 'dashboard.css')\r\n    );\r\n    const cssUri = this.panel!.webview.asWebviewUri(cssPath);\r\n    \r\n    // Read the dashboard HTML file\r\n    const dashboardHtmlPath = path.join(this.context.extensionPath, 'views', 'dashboard.html');\r\n    \r\n    try {\r\n      // Read the file content\r\n      const fs = require('fs');\r\n      let htmlContent = fs.readFileSync(dashboardHtmlPath, 'utf8');\r\n      \r\n      // Replace placeholder for Chart.js script with actual URI\r\n      // Make the replacement more robust by using a more direct approach\r\n      const headEndIndex = htmlContent.indexOf('</head>');\r\n      if (headEndIndex !== -1) {\r\n        const beforeHead = htmlContent.substring(0, headEndIndex);\r\n        const afterHead = htmlContent.substring(headEndIndex);\r\n        htmlContent = beforeHead + `<script src=\"${chartJsUri}\"></script>\\n` + afterHead;\r\n      } else {\r\n        // Fallback replacement if </head> not found\r\n        htmlContent = htmlContent.replace(\r\n          '<script>\\n        // Placeholder for Chart.js - will be replaced by the extension\\n    </script>',\r\n          `<script src=\"${chartJsUri}\"></script>`\r\n        );\r\n      }\r\n      \r\n      // Replace CSS href\r\n      htmlContent = htmlContent.replace(\r\n        'href=\"css/dashboard.css\"',\r\n        `href=\"${cssUri}\"`\r\n      );\r\n      \r\n      console.log('Dashboard HTML prepared with Chart.js inserted before </head>');\r\n      \r\n      return htmlContent;\r\n    } catch (error) {\r\n      console.error('Error reading dashboard HTML:', error);\r\n      \r\n      // Fallback to basic HTML with inline Chart.js if file couldn't be read\r\n      return `<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>CodePulse Dashboard</title>\r\n    <link rel=\"stylesheet\" href=\"${cssUri}\">\r\n    <script src=\"${chartJsUri}\"></script>\r\n    <script>\r\n        // Fallback notification\r\n        console.log('Using fallback dashboard HTML');\r\n    </script>\r\n</head>\r\n<body>\r\n    <h1>CodePulse Dashboard</h1>\r\n    <p>Error loading dashboard content. Please check the console for details.</p>\r\n    \r\n    <script>\r\n        (function() {\r\n            const vscode = acquireVsCodeApi();\r\n            vscode.postMessage({ command: 'getMetrics' });\r\n        })();\r\n    </script>\r\n</body>\r\n</html>`;\r\n    }\r\n  }\r\n}","module.exports = require(\"path\");","module.exports = require(\"fs\");","// src/statusBar.ts\r\nimport * as vscode from 'vscode';\r\n\r\nexport class StatusBarManager implements vscode.Disposable {\r\n  private statusBarItem: vscode.StatusBarItem;\r\n  \r\n  constructor() {\r\n    // Create status bar item\r\n    this.statusBarItem = vscode.window.createStatusBarItem(\r\n      vscode.StatusBarAlignment.Right,\r\n      100\r\n    );\r\n    \r\n    this.statusBarItem.name = 'CodePulse';\r\n    this.statusBarItem.command = 'codepulse.showDashboard';\r\n    this.statusBarItem.tooltip = 'Show CodePulse Dashboard';\r\n    \r\n    // Initial state\r\n    this.setIdle();\r\n    this.statusBarItem.show();\r\n  }\r\n  \r\n  /**\r\n   * Set status to indicate idle state\r\n   */\r\n  public setIdle(): void {\r\n    this.statusBarItem.text = '$(pulse) CodePulse';\r\n    this.statusBarItem.backgroundColor = undefined;\r\n  }\r\n  \r\n  /**\r\n   * Set status to indicate analyzing state\r\n   */\r\n  public setAnalyzing(): void {\r\n    this.statusBarItem.text = '$(sync~spin) CodePulse: Analyzing...';\r\n    this.statusBarItem.backgroundColor = undefined;\r\n  }\r\n  \r\n  /**\r\n   * Set status to indicate health level\r\n   */\r\n  public setHealth(health: number, tooltip?: string): void {\r\n    let icon: string;\r\n    let color: vscode.ThemeColor | undefined;\r\n    \r\n    if (health >= 80) {\r\n      // Good health\r\n      icon = '$(check)';\r\n      color = new vscode.ThemeColor('statusBarItem.warningBackground');\r\n    } else if (health >= 60) {\r\n      // Moderate health\r\n      icon = '$(warning)';\r\n      color = new vscode.ThemeColor('statusBarItem.warningBackground');\r\n    } else {\r\n      // Poor health\r\n      icon = '$(error)';\r\n      color = new vscode.ThemeColor('statusBarItem.errorBackground');\r\n    }\r\n    \r\n    this.statusBarItem.text = `${icon} CodePulse: ${Math.round(health)}`;\r\n    this.statusBarItem.backgroundColor = color;\r\n    \r\n    if (tooltip) {\r\n      this.statusBarItem.tooltip = `Code Health: ${Math.round(health)}/100\\n${tooltip}\\nClick to open dashboard`;\r\n    } else {\r\n      this.statusBarItem.tooltip = `Code Health: ${Math.round(health)}/100\\nClick to open dashboard`;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Set status to indicate error state\r\n   */\r\n  public setError(): void {\r\n    this.statusBarItem.text = '$(error) CodePulse: Error';\r\n    this.statusBarItem.backgroundColor = new vscode.ThemeColor('statusBarItem.errorBackground');\r\n    this.statusBarItem.tooltip = 'Error during analysis. Click to retry.';\r\n  }\r\n  \r\n  /**\r\n   * Dispose status bar item\r\n   */\r\n  public dispose() {\r\n    this.statusBarItem.dispose();\r\n  }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(0);\n",""],"names":[],"sourceRoot":""}